---------------------------------------------------------------------------------------------------------
Entry 1
Daniel
2020/8/19
Changes:

  Definitions.sv:
  Mapped 16 operations to our ISA's op codes, changed op code size to 4 bits


  RegFile.sv:
  1. Reduced registers' address pointers to 3-bit size (line 13), since we don't need 16 pointers in total. Technically
  we have only 4 registers that are accessible with a 2-bit address field, but a 5th one is reserved for Register_constant,
  which we use to crunch numbers. Ctrl.sv will take instructions and output the right 3-bit reg address.


  TopLevel.sv:

  1. Renamed variables for more clarity (marked as "RENAMED" in comments)
  2. Added 4 variables:
   // wire [ 2:0] RegReadAddrA, RegReadAddrB, RegWriteAddr
   // wire LoadInst
  These are for choosing which register to read from, and which one to write to.
  3. Connected above 3 variables to the inputs of the RegFile module (lines 61-63)
  4. Connected multiple variables to the output of Ctrl.sv:
  /*

    .RegWrEn      (RegWrEn),	// line 49
    .MemWrEn      (MemWrite),
    .LoadInst     (LoadInst),
    .PCTarg       (PCTarg),
    .RegReadAddrA (RegReadAddrA),
    .RegReadAddrB (RegReadAddrB),
    .RegWriteAddr (RegWriteAddr)
  */


  Ctrl.sv:
  1. increased PCTarg to a 9-bit variable, same size as TopLevel's PCTarg	(line 17)
  2. Set MemWrEn, RegWrEn, and LoadInst to match our ISA design	(lines 21, 44, 46)

---------------------------------------------------------------------------------------------------------
Entry 2
Daniel
2020/8/20
Changes:

  InstROM.sv:
  1. Commented out reading from "machine_code.txt" to temporarily allow for compilation.

  TopLevel.sv:
  1. Added wires:
  // wire MiddleFlag1;  // Used for rc_transfer, arithmetic & logical operations, mem_op. Is the 4th bit in the instruction
  // wire MiddleFlag2;  // Used for rc_transfer. Is the 5th bit in the instruction
  // wire ConditionalJump   // Whether we want to check conditions for a jump or nah
  // wire BranchAbsOrRel    // check whether branching relatviely or absolutely
  // wire [2:0] ConstantControl // Used for rc_custom
  // wire [2:0] BranchConditions

  2. Added logic:
  // logic Zero           // ALU flag
  // logic Negative      // ALU flag
  // logic ActuallyJump   // check if we really want to jump given conditions

  3. Above wires and logic connected to Ctrl.sv, and InstFetch.sv ALU.sv
  4. Added combinational logic controlling branching

  ALU.sv:
  1. Filled in most arithmetic and logical operations. Rest marked as TODO
  2. Added wires that correspond to TopLevel.sv's new wires and logics

  Ctrl.sv:
  1. Added wires that correspond to TopLevel.sv's new wires and logics
  2. Set the values of several output wires in combinational blocks
  Note on this one: Notably, Ack and PCTarg are still unset. Mem_op's impact on
  RegReadAddrA and RegReadAddrB are still unknown.

---------------------------------------------------------------------------------------------------------
Entry 3
Daniel
2020/8/21
Changes:

ALU.sv:
1. Added input variable:
// input [2:0] ControlFlags
2. Added rc_custom's proper numbers
3. 

TopLevel:
1. Connected ConstantControl to ALU's ControlFlags
